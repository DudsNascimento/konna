/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.konna

import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.routing.*
import io.ktor.http.*
import io.ktor.application.*
import io.ktor.response.*
import io.ktor.request.*
import io.ktor.features.*
import io.ktor.gson.*
import org.koin.logger.slf4jLogger
import com.google.gson.TypeAdapter
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.UUID

import org.koin.ktor.ext.*
import org.koin.dsl.module
import org.koin.dsl.single

import com.konna.domain.entity.Athlete
import com.konna.application.controller.AthletesController
import com.konna.application.controller.AthletesControllerImpl
import com.konna.application.exception.*

fun Application.configureKoin() {
    environment.monitor.subscribe(KoinApplicationStarted) {
        log.info("Koin started.")
    }
    install(Koin) {
        slf4jLogger()
        modules(koinModule)
    }
    environment.monitor.subscribe(KoinApplicationStopPreparing) {
        log.info("Koin stopping...")
    }
    environment.monitor.subscribe(KoinApplicationStopped) {
        log.info("Koin stopped.")
    }
}

fun Application.configureJson() {
    install(ContentNegotiation) {
        gson() {
            registerTypeAdapter(LocalDateTime::class.java, object: TypeAdapter<LocalDateTime>() {
                val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
                override fun read(reader: JsonReader): LocalDateTime {
                    return LocalDateTime.parse(reader.nextString(), formatter)
                }
                override fun write(writer: JsonWriter, value: LocalDateTime) {
                    writer.value(formatter.format(value))
                }
            })
            setPrettyPrinting()
            disableHtmlEscaping()
        }
    }
}

fun Application.configureRouting() {
    val athletesController by inject<AthletesController>()
    routing {
        get("/api/") {
            call.respondText("Welcome to Konna!")
        }
        get("/api/athletes") {
            call.respond(athletesController.listAthletes())
        }
        post("/api/athletes") {
            val athlete = call.receive<Athlete>()
            call.respond(athletesController.saveAthlete(athlete))
        }
    }
}

fun Application.configureErrorHandling() {
    install(StatusPages) {
        exception<ResourceNotFoundException> { cause ->
            call.respond(HttpStatusCode.NotFound, cause.message!!)
        }
    }
}

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        install(DefaultHeaders)
        install(CallLogging)
        configureKoin()
        configureJson()
        configureRouting()
        configureErrorHandling()
    }.start(wait = true)
}

val koinModule = module {
    single {
        AthletesControllerImpl(
            mutableListOf<Athlete>()
        ) as AthletesController
    }
}
